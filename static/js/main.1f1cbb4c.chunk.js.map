{"version":3,"sources":["serviceWorker.js","backend/appFetch.js","modules/app/actionTypes.js","modules/app/actions.js","modules/app/reducer.js","modules/app/selectors.js","modules/catalog/actionTypes.js","modules/catalog/selectors.js","backend/NetworkError.js","backend/userService.js","backend/catalogService.js","backend/shoppingService.js","backend/index.js","modules/catalog/actions.js","modules/catalog/reducer.js","modules/catalog/components/CategorySelector.js","modules/catalog/components/FindProducts.js","modules/common/components/ErrorDialog.js","modules/common/components/Errors.js","modules/common/components/Loader.js","modules/common/components/Pager.js","modules/common/components/ProductLink.js","modules/common/components/BackLink.js","modules/catalog/components/Products.js","modules/catalog/components/FindProductsResult.js","modules/users/actionTypes.js","modules/users/actions.js","modules/users/reducer.js","modules/users/selectors.js","modules/users/components/Login.js","modules/users/components/SignUp.js","modules/users/components/UpdateProfile.js","modules/users/components/ChangePassword.js","modules/users/components/Logout.js","modules/users/index.js","modules/shopping/actionTypes.js","modules/shopping/actions.js","modules/shopping/reducer.js","modules/shopping/selectors.js","modules/shopping/components/AddToShoppingCart.js","modules/shopping/components/ShoppingCartIcon.js","modules/shopping/components/ShoppingItem.js","modules/shopping/components/ShoppingItemList.js","modules/shopping/components/ShoppingCart.js","modules/shopping/components/BuyForm.js","modules/shopping/components/Buy.js","modules/shopping/components/OrderLink.js","modules/shopping/components/PurchaseCompleted.js","modules/shopping/components/FindOrders.js","modules/shopping/components/Orders.js","modules/shopping/components/FindOrdersResult.js","modules/shopping/components/OrderDetails.js","modules/shopping/index.js","modules/catalog/components/ProductDetails.js","modules/catalog/index.js","modules/app/components/Header.js","modules/app/components/AppGlobalComponents.js","modules/app/components/Home.js","modules/app/components/Body.js","modules/app/components/Footer.js","modules/app/components/App.js","modules/app/index.js","store/rootReducer.js","store/index.js","i18n/messages/index.js","i18n/messages/messages_en.js","i18n/messages/messages_es.js","i18n/messages/messages_gl.js","index.js","i18n/index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","networkErrorCallback","reauthenticationCallback","LOADING","LOADED","ERROR","loading","type","actionTypes","loaded","initialState","reducer","combineReducers","action","getModuleState","app","getError","isLoading","FIND_ALL_CATEGORIES_COMPLETED","FIND_PRODUCTS_COMPLETED","CLEAR_PRODUCT_SEARCH","FIND_PRODUCT_BY_ID_COMPLETED","CLEAR_PRODUCT","catalog","getCategories","categories","getCategoryName","id","category","find","name","getProductSearch","productSearch","getProduct","product","NetworkError","Error","isJson","response","contentType","headers","get","indexOf","handleResponse","onErrors","ok","status","json","payload","handleOkResponse","globalError","fieldErrors","handle4xxResponse","setReauthenticationCallback","callback","setServiceToken","serviceToken","sessionStorage","setItem","getServiceToken","getItem","removeServiceToken","removeItem","method","body","FormData","JSON","stringify","appFetch","path","options","fetch","process","login","userName","password","authenticatedUser","tryLoginFromServiceToken","signUp","user","logout","updateProfile","changePassword","oldPassword","newPassword","findAllCategories","findProducts","categoryId","keywords","page","length","findByProductId","addToShoppingCart","shoppingCartId","productId","quantity","updateShoppingCartItemQuantity","removeShoppingCartItem","buy","postalAddress","postalCode","findOrders","findOrder","orderId","init","userService","catalogService","shoppingService","dispatch","getState","selectors","backend","findAllCategoriesCompleted","criteria","clearProductSearch","result","previousFindProductsResultPage","nextFindProductsResultPage","findProductById","findProductByIdCompleted","clearProduct","CategorySelector","selectProps","useSelector","message","value","map","key","FindProducts","useDispatch","history","useHistory","useState","setCategoryId","setKeywords","toNumber","Number","className","onSubmit","e","preventDefault","actions","trim","push","onChange","target","ErrorDialog","onClose","intl","useIntl","formatMessage","style","display","tabIndex","role","data-dismiss","onClick","Errors","errors","forEach","fieldName","fieldError","index","aria-label","aria-hidden","Loader","Pager","back","next","enabled","ProductLink","to","BackLink","goBack","Products","products","scope","FindProductsResult","items","existMoreItems","SIGN_UP_COMPLETED","LOGIN_COMPLETED","LOGOUT","UPDATE_PROFILE_COMPLETED","signUpCompleted","loginCompleted","updateProfileCompleted","getUser","users","isLoggedIn","getUserName","Login","form","setUserName","setPassword","backendErrors","setBackendErrors","ref","node","noValidate","checkValidity","classList","add","htmlFor","autoFocus","required","SignUp","confirmPasswordInput","confirmPassword","setConfirmPassword","firstName","setFirstName","lastName","setLastName","email","setEmail","passwordsDoNotMatch","setPasswordsDoNotMatch","checkConfirmPassword","setCustomValidity","UpdateProfile","ChangePassword","confirmNewPasswordInput","setOldPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","checkConfirmNewPassword","event","Logout","useEffect","BUY_COMPLETED","CLEAR_ORDER","shoppingCartUpdated","shoppingCart","orderSearch","previousFindOrdersResultPage","nextFindOrdersResultPage","clearOrder","order","findOrderCompleted","totalPrice","totalQuantity","lastOrderId","shopping","getShoppingCart","getLastOrderId","getOrderSearch","getOrder","AddToShoppingCart","setQuantity","min","ShoppingCartIcon","ShoppingItem","shoppingItemListId","item","edit","onUpdateQuantity","onRemoveItem","onBackendErrors","productName","productPrice","width","ShoppingItemList","list","ShoppingCart","cart","BuyForm","setPostalAddress","setPostalCode","Buy","OrderLink","PurchaseCompleted","FindOrders","Orders","orders","Date","date","FindOrdersResult","OrderDetails","useParams","isNaN","ProductDetails","loggedIn","description","price","Header","data-toggle","data-target","aria-controls","aria-expanded","href","ConnectedErrorDialog","ConnectedLoader","AppGlobalComponents","Home","Body","exact","Footer","App","rootReducer","configureStore","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","createStore","applyMiddleware","store","locale","languages","language","userLanguage","localeWithoutRegionCode","toLowerCase","split","localeMessages","messages","initReactIntl","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1f1cbb4c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import NetworkError from './NetworkError';\n\nconst SERVICE_TOKEN_NAME = 'serviceToken';\n\nlet networkErrorCallback;\nlet reauthenticationCallback;\n\nconst isJson = response => {\n\n    const contentType = response.headers.get(\"content-type\");\n\n    return contentType && contentType.indexOf(\"application/json\") !== -1;\n\n}\n\nconst handleOkResponse = (response, onSuccess) => {\n\n    if (!response.ok) {\n        return false;\n    }\n\n    if (!onSuccess) {\n        return true;\n    }\n\n    if (response.status === 204) {\n        onSuccess();\n        return true;\n    }\n\n    if (isJson(response)) {\n        response.json().then(payload => onSuccess(payload));\n    }\n\n    return true;\n\n}\n\nconst handle4xxResponse = (response, onErrors) => {\n\n    if (response.status < 400 || response.status >= 500) {\n        return false;\n    }\n\n    if (response.status === 401 && reauthenticationCallback){\n        reauthenticationCallback();\n        return true;\n    }\n\n    if (!isJson(response)) {\n        throw new NetworkError();\n    }\n\n    if (onErrors) {\n\n        response.json().then(payload => {\n            if (payload.globalError || payload.fieldErrors) {\n                onErrors(payload);\n            }\n        });\n\n    }\n\n    return true;\n\n}\n\nconst handleResponse = (response, onSuccess, onErrors) => {\n\n    if (handleOkResponse(response, onSuccess)) {\n        return;\n    }\n\n    if (handle4xxResponse(response, onErrors)) {\n        return;\n    }\n\n    throw new NetworkError();\n    \n}\n\nexport const init = callback => networkErrorCallback = callback;\n\nexport const setReauthenticationCallback = callback => reauthenticationCallback = callback;\n\nexport const setServiceToken = serviceToken => \n    sessionStorage.setItem(SERVICE_TOKEN_NAME, serviceToken);\n\nexport const getServiceToken = () => sessionStorage.getItem(SERVICE_TOKEN_NAME);\n\nexport const removeServiceToken = () => \n    sessionStorage.removeItem(SERVICE_TOKEN_NAME);\n\nexport const config = (method, body) => {\n\n    const config = {};\n\n    config.method = method;\n\n    if (body) {\n        if (body instanceof FormData) {\n            config.body = body;\n        } else  {\n            config.headers = {'Content-Type': 'application/json'};\n            config.body = JSON.stringify(body);\n        }\n    }\n\n    let serviceToken = getServiceToken();\n\n    if (serviceToken) {\n\n        if (config.headers) {\n            config.headers['Authorization'] = `Bearer ${serviceToken}`;\n        } else {\n            config.headers = {'Authorization': `Bearer ${serviceToken}`};\n        }\n\n    }\n\n    return config;\n\n}\n\nexport const appFetch = (path, options, onSuccess, onErrors) =>\n    fetch(`${process.env.REACT_APP_BACKEND_URL}${path}`, options)\n        .then(response => handleResponse(response, onSuccess, onErrors))\n        .catch(networkErrorCallback);\n","export const LOADING = 'project/common/loading';\nexport const LOADED = 'project/common/loaded';\nexport const ERROR = 'project/common/error';\n","import * as actionTypes from './actionTypes';\n\nexport const loading = () => ({\n    type: actionTypes.LOADING\n});\n\nexport const loaded = () => ({\n    type: actionTypes.LOADED\n});\n\nexport const error = error => ({\n    type: actionTypes.ERROR,\n    error\n});","import {combineReducers} from 'redux';\n\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    error: null,\n    loading: false,\n};\n\nconst error = (state = initialState.error, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.ERROR:\n            return action.error;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst loading = (state = initialState.loading, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.LOADING:\n            return true;\n\n        case actionTypes.LOADED:\n            return false;\n\n        case actionTypes.ERROR:\n            return false;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst reducer = combineReducers({\n    error,\n    loading\n});\n\nexport default reducer;","const getModuleState = state => state.app;\n\nexport const getError = state => getModuleState(state).error;\n\nexport const isLoading = state => getModuleState(state).loading;","export const FIND_ALL_CATEGORIES_COMPLETED = \"project/catalog/findAllCategoriesCompleted\";\nexport const FIND_PRODUCTS_COMPLETED = \"project/catalog/findProductsCompleted\";\nexport const CLEAR_PRODUCT_SEARCH = \"project/catalog/clearProductSearch\";\nexport const FIND_PRODUCT_BY_ID_COMPLETED = \"project/catalog/findProductByIdCompleted\";\nexport const CLEAR_PRODUCT = \"project/catalog/clearProduct\";","const getModuleState = state => state.catalog;\n\nexport const getCategories = state => \n    getModuleState(state).categories;\n\nexport const getCategoryName = (categories, id) => {\n\n    if (!categories) {\n        return '';\n    }\n\n    const category = categories.find(category => category.id === id);\n\n    if (!category) {\n        return '';\n    }\n\n    return category.name;\n\n}\n\nexport const getProductSearch = state =>\n    getModuleState(state).productSearch;\n\nexport const getProduct = state =>\n    getModuleState(state).product;\n\n","class NetworkError extends Error {\n\n    constructor() {\n        super(\"Network error\");\n    }\n\n}\n\nexport default NetworkError;","import {config, appFetch, setServiceToken, getServiceToken, removeServiceToken, setReauthenticationCallback} from './appFetch';\n\nexport const login = (userName, password, onSuccess, onErrors, reauthenticationCallback) =>\n    appFetch('/users/login', config('POST', {userName, password}),\n        authenticatedUser => {\n            setServiceToken(authenticatedUser.serviceToken);\n            setReauthenticationCallback(reauthenticationCallback);\n            onSuccess(authenticatedUser);\n        }, \n        onErrors);\n\nexport const tryLoginFromServiceToken = (onSuccess, reauthenticationCallback) => {\n\n    const serviceToken = getServiceToken();\n\n    if (!serviceToken) {\n        onSuccess();\n        return;\n    }\n\n    setReauthenticationCallback(reauthenticationCallback);\n\n    appFetch('/users/loginFromServiceToken', config('POST'),\n        authenticatedUser => onSuccess(authenticatedUser),\n        () => removeServiceToken()\n    );\n\n}\n\nexport const signUp = (user, onSuccess, onErrors, reauthenticationCallback) => {\n\n    appFetch('/users/signUp', config('POST', user), \n        authenticatedUser => {\n            setServiceToken(authenticatedUser.serviceToken);\n            setReauthenticationCallback(reauthenticationCallback);\n            onSuccess(authenticatedUser);\n        }, \n        onErrors);\n\n}\n\nexport const logout = () => removeServiceToken();\n\nexport const updateProfile = (user, onSuccess, onErrors) =>\n    appFetch(`/users/${user.id}`, config('PUT', user),\n        onSuccess, onErrors);\n\nexport const changePassword = (id, oldPassword, newPassword, onSuccess,\n    onErrors) =>\n    appFetch(`/users/${id}/changePassword`, \n        config('POST', {oldPassword, newPassword}),\n        onSuccess, onErrors);","import {config, appFetch} from './appFetch';\n\nexport const findAllCategories = (onSuccess) => \n    appFetch('/catalog/categories', config('GET'), onSuccess);\n\nexport const findProducts = ({categoryId, keywords, page}, \n    onSuccess) => {\n\n    let path = `/catalog/products?page=${page}`;\n\n    path += categoryId ? `&categoryId=${categoryId}` : \"\";\n    path += keywords.length > 0 ? `&keywords=${keywords}` : \"\";\n\n    appFetch(path, config('GET'), onSuccess);\n\n}\n\nexport const findByProductId = (id, onSuccess) => \n    appFetch(`/catalog/products/${id}`, config('GET'), onSuccess);\n","import {config, appFetch} from './appFetch';\n\nexport const addToShoppingCart = (shoppingCartId, productId, quantity, onSuccess, \n    onErrors) =>\n    appFetch(`/shopping/shoppingcarts/${shoppingCartId}/addToShoppingCart`, \n        config('POST', {productId, quantity}), onSuccess, onErrors);\n\nexport const updateShoppingCartItemQuantity = (shoppingCartId, productId,\n    quantity, onSuccess, onErrors) =>\n    appFetch(`/shopping/shoppingcarts/${shoppingCartId}/updateShoppingCartItemQuantity`, \n        config('POST', {productId, quantity}), onSuccess, onErrors);\n\nexport const removeShoppingCartItem = (shoppingCartId, productId, onSuccess,\n    onErrors) =>\n    appFetch(`/shopping/shoppingcarts/${shoppingCartId}/removeShoppingCartItem`, \n        config('POST', {productId}), onSuccess, onErrors);\n\nexport const buy = (shoppingCartId, postalAddress, postalCode, onSuccess, \n    onErrors) =>\n    appFetch(`/shopping/shoppingcarts/${shoppingCartId}/buy`, \n        config('POST', {postalAddress, postalCode}), onSuccess, onErrors);\n\nexport const findOrders = ({page}, onSuccess) => \n    appFetch(`/shopping/orders?page=${page}`, config('GET'), onSuccess);\n\nexport const findOrder = (orderId, onSuccess) =>\n    appFetch(`/shopping/orders/${orderId}`, config('GET'), onSuccess);\n","import {init} from './appFetch';\nimport * as userService from './userService';\nimport * as catalogService from './catalogService';\nimport * as shoppingService from './shoppingService';\n\nexport {default as NetworkError} from \"./NetworkError\";\n\nexport default {init, userService, catalogService, shoppingService};\n","import * as actionTypes from './actionTypes';\nimport * as selectors from './selectors';\nimport backend from '../../backend';\n\nconst findAllCategoriesCompleted = categories => ({\n    type: actionTypes.FIND_ALL_CATEGORIES_COMPLETED,\n    categories\n}); \n\nexport const findAllCategories = () => (dispatch, getState) => {\n\n    const categories = selectors.getCategories(getState());\n\n    if (!categories) {\n\n        backend.catalogService.findAllCategories(\n            categories => dispatch(findAllCategoriesCompleted(categories))\n        );\n        \n    }\n\n}\n\nconst findProductsCompleted = productSearch => ({\n    type: actionTypes.FIND_PRODUCTS_COMPLETED,\n    productSearch\n});\n\nexport const findProducts = criteria => dispatch => {\n\n    dispatch(clearProductSearch());\n    backend.catalogService.findProducts(criteria,\n        result => dispatch(findProductsCompleted({criteria, result})));\n\n}\n\nexport const previousFindProductsResultPage = criteria =>\n    findProducts({...criteria, page: criteria.page-1});\n\nexport const nextFindProductsResultPage = criteria =>\n    findProducts({...criteria, page: criteria.page+1});\n\nconst clearProductSearch = () => ({\n    type: actionTypes.CLEAR_PRODUCT_SEARCH\n});\n\nconst findProductByIdCompleted = product => ({\n    type: actionTypes.FIND_PRODUCT_BY_ID_COMPLETED,\n    product\n});\n    \nexport const findProductById = id => dispatch => {\n    backend.catalogService.findByProductId(id,\n        product => dispatch(findProductByIdCompleted(product)));\n}\n\nexport const clearProduct = () => ({\n    type: actionTypes.CLEAR_PRODUCT\n});\n","import {combineReducers} from 'redux';\n\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    categories: null,\n    productSearch: null,\n    product: null\n};\n\nconst categories = (state = initialState.categories, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.FIND_ALL_CATEGORIES_COMPLETED:\n            return action.categories;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst productSearch = (state = initialState.productSearch, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.FIND_PRODUCTS_COMPLETED:\n            return action.productSearch;\n\n        case actionTypes.CLEAR_PRODUCT_SEARCH:\n            return initialState.productSearch;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst product = (state = initialState.product, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.FIND_PRODUCT_BY_ID_COMPLETED:\n            return action.product;\n\n        case actionTypes.CLEAR_PRODUCT:\n            return initialState.product;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst reducer = combineReducers({\n    categories,\n    productSearch,\n    product\n});\n\nexport default reducer;\n\n\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as selectors from '../selectors';\n\nconst CategorySelector = (selectProps) => {\n\n    const categories = useSelector(selectors.getCategories);\n    \n    return (\n\n        <select {...selectProps}>\n\n            <FormattedMessage id='project.catalog.CategorySelector.allDepartments'>\n                {message => (<option value=\"\">{message}</option>)}\n            </FormattedMessage>\n\n            {categories && categories.map(category => \n                <option key={category.id} value={category.id}>{category.name}</option>\n            )}\n\n        </select>\n\n    );\n\n}\n\nCategorySelector.propTypes = {\n    selectProps: PropTypes.object\n};\n\nexport default CategorySelector;\n","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport CategorySelector from './CategorySelector';\nimport * as actions from '../actions';\n\nconst FindProducts = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [categoryId, setCategoryId] = useState('');\n    const [keywords, setKeywords] = useState('');\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        dispatch(actions.findProducts(\n            {categoryId: toNumber(categoryId), \n                keywords: keywords.trim(), page: 0}));\n        history.push('/catalog/find-products-result');\n    }\n\n    const toNumber = value => value.length > 0 ? Number(value) : null;\n\n    return (\n\n        <form className=\"form-inline mt-2 mt-md-0\" onSubmit={e => handleSubmit(e)}>\n\n            <CategorySelector id=\"categoryId\" className=\"custom-select my-1 mr-sm-2\"\n                value={categoryId} onChange={e => setCategoryId(e.target.value)}/>\n\n            <input id=\"keywords\" type=\"text\" className=\"form-control mr-sm-2\"\n                value={keywords} onChange={e => setKeywords(e.target.value)}/>\n            \n            <button type=\"submit\" className=\"btn btn-primary my-2 my-sm-0\">\n                <FormattedMessage id='project.global.buttons.search'/>\n            </button>\n\n        </form>\n\n    );\n\n}\n\nexport default FindProducts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {useIntl, FormattedMessage} from 'react-intl';\n\nimport {NetworkError} from '../../../backend';\n\nconst ErrorDialog = ({error, onClose}) => {\n\n    const intl = useIntl();\n\n    if (error == null) {\n        return null;\n    }\n\n    const modalStyle = {display: 'block'}; \n    const message = error instanceof NetworkError ?\n        intl.formatMessage({id: 'project.global.exceptions.NetworkError'}) :\n        error.message;\n\n    return (\n\n        <div className=\"modal\" style={modalStyle} tabIndex=\"-1\" role=\"dialog\">\n            <div className=\"modal-dialog\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">\n                            <FormattedMessage id=\"project.common.ErrorDialog.title\"/>\n                        </h5>\n                    </div>\n                    <div className=\"modal-body\">\n                        <p>{message}</p>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-primary\" \n                            data-dismiss=\"modal\" \n                            onClick={onClose}>\n                            <FormattedMessage id=\"project.global.buttons.close\"/>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    );\n\n};\n\nErrorDialog.propTypes = {\n    error: PropTypes.object,\n    onClose: PropTypes.func.isRequired\n}\n\nexport default ErrorDialog;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {useIntl} from 'react-intl';\n\nconst Errors = ({errors, onClose}) => {\n\n    const intl = useIntl();\n\n    if (!errors) {\n        return null;\n    }\n\n    let globalError;\n    let fieldErrors;\n\n    if (errors.globalError) {\n        globalError = errors.globalError;\n    } else if (errors.fieldErrors) {\n        fieldErrors = [];\n        errors.fieldErrors.forEach(e => {\n            let fieldName = intl.formatMessage({id: `project.global.fields.${e.fieldName}`});\n            fieldErrors.push(`${fieldName}: ${e.message}`)\n        });\n\n    }\n\n    return (\n\n        <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n\n            {globalError ? globalError : ''}\n\n            {fieldErrors ?\n                <ul>\n                    {fieldErrors.map((fieldError, index) =>\n                        <li key={index}>{fieldError}</li>\n                    )}\n                </ul>\n                : \n                ''\n            }\n\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" \n                onClick={() => onClose()}>\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n\n        </div>\n\n    );\n\n}\n\nErrors.propTypes = {\n    errors: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClose: PropTypes.func.isRequired\n};\n\nexport default Errors;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Loader.css';\n\nconst Loader = ({loading}) => loading && (\n    <div id=\"floatingCirclesG\">\n        <div className=\"f_circleG\" id=\"frotateG_01\"></div>\n        <div className=\"f_circleG\" id=\"frotateG_02\"></div>\n        <div className=\"f_circleG\" id=\"frotateG_03\"></div>\n        <div className=\"f_circleG\" id=\"frotateG_04\"></div>\n        <div className=\"f_circleG\" id=\"frotateG_05\"></div>\n        <div className=\"f_circleG\" id=\"frotateG_07\"></div>\n        <div className=\"f_circleG\" id=\"frotateG_08\"></div>\n    </div>\n);\n\nLoader.propTypes = {\n    loading: PropTypes.bool.isRequired\n};\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nconst Pager = ({back, next}) => (\n\n    <nav aria-label=\"page navigation\">\n        <ul className=\"pagination justify-content-center\">\n            <li className={`page-item ${back.enabled ? \"\": \"disabled\"}`}>\n                <button className=\"page-link\"\n                    onClick={back.onClick}>\n                    <FormattedMessage id='project.global.buttons.back'/>\n                </button>\n            </li>\n            <li className={`page-item ${next.enabled ? \"\": \"disabled\"}`}>\n                <button className=\"page-link\"\n                    onClick={next.onClick}>\n                    <FormattedMessage id='project.global.buttons.next'/>\n                </button>\n            </li>\n        </ul>\n    </nav>\n\n);\n\nPager.propTypes = {\n    back: PropTypes.object.isRequired,\n    next: PropTypes.object.isRequired\n};\n\nexport default Pager;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {Link} from 'react-router-dom';\n\nconst ProductLink = ({id, name}) => {\n    \n    return (\n        <Link to={`/catalog/product-details/${id}`}>\n            {name}\n        </Link>\n    );\n\n}\n\nProductLink.propTypes = {\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n};\n\nexport default ProductLink; ","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nconst BackLink = () => {\n\n    const history = useHistory();\n\n    if (history.length <= 1) {\n        return null;\n    } \n    \n    return (\n\n        <button type=\"button\" className=\"btn btn-link\" \n            onClick={() => history.goBack()}>\n\n            <FormattedMessage id='project.global.buttons.back'/>\n\n        </button>\n\n    );\n\n};\n\nexport default BackLink;\n","import React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as selectors from '../selectors';\nimport {ProductLink} from '../../common';\n\nconst Products = ({products, categories}) => (\n\n    <table className=\"table table-striped table-hover\">\n\n        <thead>\n            <tr>\n                <th scope=\"col\">\n                    <FormattedMessage id='project.global.fields.department'/>\n                </th>\n                <th scope=\"col\">\n                    <FormattedMessage id='project.global.fields.name'/>\n                </th>\n            </tr>\n        </thead>\n\n        <tbody>\n            {products.map(product => \n                <tr key={product.id}>\n                    <td>{selectors.getCategoryName(categories, product.categoryId)}</td>\n                    <td><ProductLink id={product.id} name={product.name}/></td>\n                </tr>\n            )}\n        </tbody>\n\n    </table>\n\n);\n\nProducts.propTypes = {\n    products: PropTypes.array.isRequired,\n    categories: PropTypes.array.isRequired\n};\n\nexport default Products;","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as selectors from '../selectors';\nimport * as actions from '../actions';\nimport {Pager} from '../../common';\nimport Products from './Products';\n\nconst FindProductsResult = () => {\n\n    const productSearch = useSelector(selectors.getProductSearch);\n    const categories = useSelector(selectors.getCategories);\n    const dispatch = useDispatch();\n\n    if (!productSearch) {\n        return null;\n    }\n\n    if (productSearch.result.items.length === 0) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                <FormattedMessage id='project.catalog.FindProductsResult.noProductsFound'/>\n            </div>\n        );\n    }\n    \n    return (\n\n        <div>\n            <Products products={productSearch.result.items} categories={categories}/>\n            <Pager \n                back={{\n                    enabled: productSearch.criteria.page >= 1,\n                    onClick: () => dispatch(actions.previousFindProductsResultPage(productSearch.criteria))}}\n                next={{\n                    enabled: productSearch.result.existMoreItems,\n                    onClick: () => dispatch(actions.nextFindProductsResultPage(productSearch.criteria))}}/>\n        </div>\n\n    );\n\n}\n\nexport default FindProductsResult;","export const SIGN_UP_COMPLETED = \"project/users/signUpCompleted\";\nexport const LOGIN_COMPLETED = \"project/users/loginCompleted\";\nexport const LOGOUT = \"project/users/logout\";\nexport const UPDATE_PROFILE_COMPLETED = \"project/users/updateProfileCompleted\";\n","import * as actionTypes from './actionTypes';\nimport backend from '../../backend';\n\nconst signUpCompleted = authenticatedUser => ({\n    type: actionTypes.SIGN_UP_COMPLETED,\n    authenticatedUser\n});\n\nexport const signUp = (user, onSuccess, onErrors, reauthenticationCallback) => dispatch =>\n    backend.userService.signUp(user,\n        authenticatedUser => {\n            dispatch(signUpCompleted(authenticatedUser));\n            onSuccess();\n        },\n        onErrors,\n        reauthenticationCallback);\n\nconst loginCompleted = authenticatedUser => ({\n    type: actionTypes.LOGIN_COMPLETED,\n    authenticatedUser\n});\n\nexport const login = (userName, password, onSuccess, onErrors, reauthenticationCallback) => dispatch =>\n    backend.userService.login(userName, password,\n        authenticatedUser => {\n            dispatch(loginCompleted(authenticatedUser));\n            onSuccess();\n        },\n        onErrors,\n        reauthenticationCallback\n    );\n\nexport const tryLoginFromServiceToken = reauthenticationCallback => dispatch =>\n    backend.userService.tryLoginFromServiceToken(\n        authenticatedUser => {\n            if (authenticatedUser) {\n                dispatch(loginCompleted(authenticatedUser));\n            }\n        },\n        reauthenticationCallback\n    );\n    \n\nexport const logout = () => {\n\n    backend.userService.logout();\n\n    return {type: actionTypes.LOGOUT};\n\n};\n\nexport const updateProfileCompleted = user => ({\n    type: actionTypes.UPDATE_PROFILE_COMPLETED,\n    user\n})\n\nexport const updateProfile = (user, onSuccess, onErrors) => dispatch =>\n    backend.userService.updateProfile(user, \n        user => {\n            dispatch(updateProfileCompleted(user));\n            onSuccess();\n        },\n        onErrors);\n\nexport const changePassword = (id, oldPassword, newPassword, onSuccess, onErrors) => dispatch =>\n    backend.userService.changePassword(id, oldPassword, newPassword, onSuccess, onErrors);","import {combineReducers} from 'redux';\n\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    user: null\n};\n\nconst user = (state = initialState.user, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.SIGN_UP_COMPLETED:\n            return action.authenticatedUser.user;\n\n        case actionTypes.LOGIN_COMPLETED:\n            return action.authenticatedUser.user;\n\n        case actionTypes.LOGOUT:\n            return initialState.user;\n\n        case actionTypes.UPDATE_PROFILE_COMPLETED:\n            return action.user;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst reducer = combineReducers({\n    user\n});\n\nexport default reducer;\n\n\n","const getModuleState = state => state.users;\n\nexport const getUser = state => \n    getModuleState(state).user;\n\nexport const isLoggedIn = state =>\n    getUser(state) !== null\n\nexport const getUserName = state => \n    isLoggedIn(state) ? getUser(state).userName : null;\n\n\n\n","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\n\nconst Login = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [userName, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n    const [backendErrors, setBackendErrors] = useState(null);\n    let form;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity()) {\n\n            dispatch(actions.login(\n                userName.trim(),\n                password,\n                () => history.push('/'),\n                errors => setBackendErrors(errors),\n                () => {\n                    history.push('/users/login');\n                    dispatch(actions.logout());\n                }\n            ));\n\n        } else {\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n        }\n\n    }\n\n    return (\n        <div>\n            <p className=\"text-center\">\n                <Link to=\"/users/signup\">\n                    <FormattedMessage id=\"project.users.SignUp.title\"/>\n                </Link>\n            </p>\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <div className=\"card bg-light border-dark\">\n                <h5 className=\"card-header\">\n                    <FormattedMessage id=\"project.users.Login.title\"/>\n                </h5>\n                <div className=\"card-body\">\n                    <form ref={node => form = node} \n                        className=\"needs-validation\" noValidate \n                        onSubmit={e => handleSubmit(e)}>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"userName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.userName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"userName\" className=\"form-control\"\n                                    value={userName}\n                                    onChange={e => setUserName(e.target.value)}\n                                    autoFocus\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"password\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.password\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"password\" id=\"password\" className=\"form-control\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <div className=\"offset-md-3 col-md-1\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    <FormattedMessage id=\"project.users.Login.title\"/>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Login;","import React, {useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\n\nconst SignUp = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [userName, setUserName] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail]  = useState('');\n    const [backendErrors, setBackendErrors] = useState(null);\n    const [passwordsDoNotMatch, setPasswordsDoNotMatch] = useState(false);\n    let form;\n    let confirmPasswordInput;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity() && checkConfirmPassword()) {\n            \n            dispatch(actions.signUp(\n                {userName: userName.trim(),\n                password: password,\n                firstName: firstName.trim(),\n                lastName: lastName.trim(),\n                email: email.trim()},\n                () => history.push('/'),\n                errors => setBackendErrors(errors),\n                () => {\n                    history.push('/users/login');\n                    dispatch(actions.logout());\n                }\n            ));\n            \n\n        } else {\n\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n\n        }\n\n    }\n\n    const checkConfirmPassword = () => {\n\n        if (password !== confirmPassword) {\n\n            confirmPasswordInput.setCustomValidity('error');\n            setPasswordsDoNotMatch(true);\n\n            return false;\n\n        } else {\n            return true;\n        }\n\n    }\n\n    const handleConfirmPasswordChange = value => {\n\n        confirmPasswordInput.setCustomValidity('');\n        setConfirmPassword(value);\n        setPasswordsDoNotMatch(false);\n    \n    }\n\n    return (\n        <div>\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <div className=\"card bg-light border-dark\">\n                <h5 className=\"card-header\">\n                    <FormattedMessage id=\"project.users.SignUp.title\"/>\n                </h5>\n                <div className=\"card-body\">\n                    <form ref={node => form = node}\n                        className=\"needs-validation\" noValidate \n                        onSubmit={e => handleSubmit(e)}>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"userName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.userName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"userName\" className=\"form-control\"\n                                    value={userName}\n                                    onChange={e => setUserName(e.target.value)}\n                                    autoFocus\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"password\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.password\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"password\" id=\"password\" className=\"form-control\"\n                                    value={password}\n                                    onChange={e => setPassword(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"confirmPassword\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.users.SignUp.fields.confirmPassword\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input ref={node => confirmPasswordInput = node}\n                                    type=\"password\" id=\"confirmPassword\" className=\"form-control\"\n                                    value={confirmPassword}\n                                    onChange={e => handleConfirmPasswordChange(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    {passwordsDoNotMatch ?\n                                        <FormattedMessage id='project.global.validator.passwordsDoNotMatch'/> :\n                                        <FormattedMessage id='project.global.validator.required'/>}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"firstName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.firstName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"firstName\" className=\"form-control\"\n                                    value={firstName}\n                                    onChange={e => setFirstName(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"lastName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.lastName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"lastName\" className=\"form-control\"\n                                    value={lastName}\n                                    onChange={e => setLastName(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"email\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.email\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"email\" id=\"email\" className=\"form-control\"\n                                    value={email}\n                                    onChange={e => setEmail(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.email'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <div className=\"offset-md-3 col-md-2\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    <FormattedMessage id=\"project.users.SignUp.title\"/>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default SignUp;","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\n\nconst UpdateProfile = () => {\n\n    const user = useSelector(selectors.getUser);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [firstName, setFirstName] = useState(user.firstName);\n    const [lastName, setLastName] = useState(user.lastName);\n    const [email, setEmail]  = useState(user.email);\n    const [backendErrors, setBackendErrors] = useState(null);\n    let form;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity()) {\n            \n            dispatch(actions.updateProfile(\n                {id: user.id,\n                firstName: firstName.trim(),\n                lastName: lastName.trim(),\n                email: email.trim()},\n                () => history.push('/'),\n                errors => setBackendErrors(errors)));\n\n        } else {\n\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n\n        }\n\n    }\n\n    return (\n        <div>\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <div className=\"card bg-light border-dark\">\n                <h5 className=\"card-header\">\n                    <FormattedMessage id=\"project.users.UpdateProfile.title\"/>\n                </h5>\n                <div className=\"card-body\">\n                    <form ref={node => form = node} \n                        className=\"needs-validation\" noValidate onSubmit={e => handleSubmit(e)}>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"firstName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.firstName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"firstName\" className=\"form-control\"\n                                    value={firstName}\n                                    onChange={e => setFirstName(e.target.value)}\n                                    autoFocus\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"lastName\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.lastName\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"lastName\" className=\"form-control\"\n                                    value={lastName}\n                                    onChange={e => setLastName(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"email\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.email\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"email\" id=\"email\" className=\"form-control\"\n                                    value={email}\n                                    onChange={e => setEmail(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.email'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <div className=\"offset-md-3 col-md-1\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    <FormattedMessage id=\"project.global.buttons.save\"/>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default UpdateProfile;","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\n\nconst ChangePassword = () => {\n\n    const user = useSelector(selectors.getUser);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [oldPassword, setOldPassword] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmNewPassword, setConfirmNewPassword] = useState('');\n    const [backendErrors, setBackendErrors] = useState(null);\n    const [passwordsDoNotMatch, setPasswordsDoNotMatch] = useState(false);\n    let form;\n    let confirmNewPasswordInput;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity() && checkConfirmNewPassword()) {\n\n            dispatch(actions.changePassword(user.id, oldPassword, newPassword,\n                () => history.push('/'),\n                errors => setBackendErrors(errors)));\n\n        } else {\n\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n            \n        }\n\n    }\n\n    const checkConfirmNewPassword = () => {\n\n        if (newPassword !== confirmNewPassword) {\n\n            confirmNewPasswordInput.setCustomValidity('error');\n            setPasswordsDoNotMatch(true);\n\n            return false;\n\n        } else {\n            return true;\n        }\n\n    }\n\n    const handleConfirmNewPasswordChange = event => {\n\n        confirmNewPasswordInput.setCustomValidity('');\n        setConfirmNewPassword(event.target.value);\n        setPasswordsDoNotMatch(false);\n\n    }\n\n    return (\n        <div>\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <div className=\"card bg-light border-dark\">\n                <h5 className=\"card-header\">\n                    <FormattedMessage id=\"project.users.ChangePassword.title\"/>\n                </h5>\n                <div className=\"card-body\">\n                    <form ref={node => form = node} \n                        className=\"needs-validation\" noValidate onSubmit={e => handleSubmit(e)}>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"oldPassword\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.users.ChangePassword.fields.oldPassword\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"password\" id=\"oldPassword\" className=\"form-control\"\n                                    value={oldPassword}\n                                    onChange={e => setOldPassword(e.target.value)}\n                                    autoFocus\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"newPassword\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.users.ChangePassword.fields.newPassword\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"password\" id=\"newPassword\" className=\"form-control\"\n                                    value={newPassword}\n                                    onChange={e => setNewPassword(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"confirmNewPassword\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.users.ChangePassword.fields.confirmNewPassword\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input ref={node => confirmNewPasswordInput = node}\n                                    type=\"password\" id=\"confirmNewPassword\" className=\"form-control\"\n                                    value={confirmNewPassword}\n                                    onChange={e => handleConfirmNewPasswordChange(e)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    {passwordsDoNotMatch ?\n                                        <FormattedMessage id='project.global.validator.passwordsDoNotMatch'/> :\n                                        <FormattedMessage id='project.global.validator.required'/>}\n                                    \n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <div className=\"offset-md-3 col-md-1\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    <FormattedMessage id=\"project.global.buttons.save\"/>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default ChangePassword;\n","import {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport users from '../../users';\n\nconst Logout = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n        dispatch(users.actions.logout());\n        history.push('/');\n    });\n\n    return null;\n\n}\n\nexport default Logout;","import * as actions from './actions';\nimport * as actionTypes from './actionTypes';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nexport {default as Login} from './components/Login';\nexport {default as SignUp} from './components/SignUp';\nexport {default as UpdateProfile} from './components/UpdateProfile';\nexport {default as ChangePassword} from './components/ChangePassword';\nexport {default as Logout} from './components/Logout';\n\nexport default {actions, actionTypes, reducer, selectors};","export const SHOPPING_CART_UPDATED = \"project/shopping/shoppingCartUpdated\";\nexport const BUY_COMPLETED = \"project/shopping/buyCompleted\";\nexport const CLEAR_ORDER_SEARCH = \"project/shopping/clearOrderSearch\";\nexport const FIND_ORDERS_COMPLETED = \"project/shopping/findOrdersCompleted\";\nexport const CLEAR_ORDER = \"project/shopping/clearOrder\";\nexport const FIND_ORDER_COMPLETED = \"project/shopping/findOrderCompleted\";","import backend from '../../backend';\nimport * as actionTypes from './actionTypes';\n\nconst shoppingCartUpdated = shoppingCart => ({\n    type: actionTypes.SHOPPING_CART_UPDATED,\n    shoppingCart\n});\n\nexport const addToShoppingCart = (shoppingCartId, productId, quantity,\n    onSuccess, onErrors) => dispatch =>\n    backend.shoppingService.addToShoppingCart(shoppingCartId, productId,\n        quantity, shoppingCart => {\n            dispatch(shoppingCartUpdated(shoppingCart));\n            onSuccess();\n        },\n        onErrors);\n\nexport const updateShoppingCartItemQuantity = (shoppingCartId, productId, \n    quantity, onSuccess, onErrors) => dispatch => \n    backend.shoppingService.updateShoppingCartItemQuantity(shoppingCartId,\n        productId, quantity, shoppingCart => {\n            dispatch(shoppingCartUpdated(shoppingCart));\n            onSuccess();\n        },\n        onErrors);\n\nexport const removeShoppingCartItem = (shoppingCartId, productId, onSuccess, \n    onErrors) => dispatch => \n    backend.shoppingService.removeShoppingCartItem(shoppingCartId,\n        productId, shoppingCart => {\n            dispatch(shoppingCartUpdated(shoppingCart));\n            onSuccess();\n        },\n        onErrors);\n\nconst buyCompleted = (orderId) => ({\n    type: actionTypes.BUY_COMPLETED,\n    orderId\n});\n\nexport const buy = (shoppingCartId, postalAddress, postalCode, onSuccess, \n    onErrors) => dispatch =>\n    backend.shoppingService.buy(shoppingCartId, postalAddress, postalCode, ({id}) => {\n        dispatch(buyCompleted(id));\n        onSuccess();\n    },\n    onErrors);\n\nconst findOrdersCompleted = orderSearch => ({\n    type: actionTypes.FIND_ORDERS_COMPLETED,\n    orderSearch\n});\n\nconst clearOrderSearch = () => ({\n    type: actionTypes.CLEAR_ORDER_SEARCH\n});\n\nexport const findOrders = criteria => dispatch => {\n\n    dispatch(clearOrderSearch());\n    backend.shoppingService.findOrders(criteria, \n        result => dispatch(findOrdersCompleted({criteria, result})));\n\n}    \n\nexport const previousFindOrdersResultPage = criteria => \n    findOrders({page: criteria.page-1});\n\nexport const nextFindOrdersResultPage = criteria => \n    findOrders({page: criteria.page+1});\n\nconst findOrderCompleted = order => ({\n    type: actionTypes.FIND_ORDER_COMPLETED,\n    order\n});\n\nexport const clearOrder = () => ({\n    type: actionTypes.CLEAR_ORDER\n});\n\nexport const findOrder = orderId => dispatch => {\n    backend.shoppingService.findOrder(orderId, order => {\n        dispatch(findOrderCompleted(order));\n    });\n}","import {combineReducers} from 'redux';\n\nimport users from '../users';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    shoppingCart: null,\n    lastOrderId: null,\n    orderSearch: null,\n    order: null\n};\n\nconst shoppingCart = (state = initialState.shoppingCart, action) => {\n\n    switch (action.type) {\n\n        case users.actionTypes.LOGIN_COMPLETED:\n            return action.authenticatedUser.shoppingCart;\n\n        case users.actionTypes.SIGN_UP_COMPLETED:\n            return action.authenticatedUser.shoppingCart;\n\n        case actionTypes.SHOPPING_CART_UPDATED:\n            return action.shoppingCart;\n\n        case actionTypes.BUY_COMPLETED:\n            return {id: state.id, items: [], totalPrice: 0, totalQuantity: 0};\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst lastOrderId = (state = initialState.lastOrderId, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.BUY_COMPLETED:\n            return action.orderId;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst orderSearch = (state = initialState.orderSearch, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.FIND_ORDERS_COMPLETED:\n            return action.orderSearch;\n\n        case actionTypes.CLEAR_ORDER_SEARCH:\n            return initialState.orderSearch;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst order = (state = initialState.order, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.FIND_ORDER_COMPLETED:\n            return action.order;\n\n        case actionTypes.CLEAR_ORDER:\n            return initialState.order;\n\n        default:\n            return state;\n\n    }\n\n}\n\nconst reducer = combineReducers({\n    shoppingCart,\n    lastOrderId,\n    orderSearch,\n    order\n});\n\nexport default reducer;\n\n\n","const getModuleState = state => state.shopping;\n\nexport const getShoppingCart = state => \n    getModuleState(state).shoppingCart;\n\nexport const getLastOrderId = state =>\n    getModuleState(state).lastOrderId;\n\nexport const getOrderSearch = state =>\n    getModuleState(state).orderSearch;\n\nexport const getOrder = state =>\n    getModuleState(state).order;\n","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\n\nconst AddToShoppingCart = ({productId}) => {\n\n    const shoppingCart = useSelector(selectors.getShoppingCart);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [quantity, setQuantity] = useState(1);\n    const [backendErrors, setBackendErrors] = useState(null);\n    let form;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity()) {\n\n            dispatch(actions.addToShoppingCart(shoppingCart.id, \n                productId, quantity,\n                () => history.push('/shopping/shopping-cart'),\n                errors => setBackendErrors(errors)));\n\n        } else {\n\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n\n        }\n\n    }\n\n    return (\n        <div>\n            <Errors errors={backendErrors} onClose={() => setBackendErrors(null)}/>\n            <form ref={node => form = node}\n                className=\"needs-validation\" noValidate \n                onSubmit={e => handleSubmit(e)}>\n                <div className=\"form-group row\">\n                    <label htmlFor=\"quantity\" className=\"offset-md-5 col-md-1 col-form-label\">\n                        <FormattedMessage id=\"project.global.fields.quantity\"/>\n                    </label>\n                    <div className=\"col-md-2\">\n                        <input type=\"number\" id=\"quantity\" className=\"form-control\"\n                            value={quantity}\n                            onChange={e => setQuantity(Number(e.target.value))}\n                            autoFocus\n                            min=\"1\" />\n                        <div className=\"invalid-feedback\">\n                            <FormattedMessage id='project.global.validator.incorrectQuantity'/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <div className=\"offset-md-6 col-md-2\">\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                            <FormattedMessage id=\"project.shopping.AddToCart.add\"/>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n\n}\n\n\nAddToShoppingCart.propTypes = {\n    productId: PropTypes.number.isRequired\n};\n\nexport default AddToShoppingCart;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport * as selectors from '../selectors';\n\nconst ShoppingCartIcon = () => {\n\n    const shoppingCart = useSelector(selectors.getShoppingCart);\n    \n    return (\n        <div>\n            <span className=\"fas fa-shopping-cart\"></span>&nbsp;\n            ({shoppingCart.totalQuantity})\n        </div>\n    );\n\n}\n\nexport default ShoppingCartIcon;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedNumber} from 'react-intl';\n\nimport {ProductLink} from '../../common';\n\nconst ShoppingItem = ({shoppingItemListId, item, edit, onUpdateQuantity, \n    onRemoveItem, onBackendErrors}) => {\n\n    const [quantity, setQuantity] = useState(item.quantity);\n    let form;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity()) {\n            \n            onUpdateQuantity(shoppingItemListId,\n                item.productId, quantity, \n                () => onBackendErrors(null), \n                backendErrors => {\n                    setQuantity(item.quantity);\n                    onBackendErrors(backendErrors);\n                });\n\n        } else {\n\n            onBackendErrors(null);\n            form.classList.add('was-validated');\n\n        }\n    \n    }\n\n    const handleRemoveItem = () => {\n\n        onRemoveItem(shoppingItemListId,\n            item.productId, \n            () => onBackendErrors(null), \n            backendErrors => onBackendErrors(backendErrors));\n\n    }\n\n    return (\n        <tr>                   \n            <td>\n                { edit &&\n                <span>\n                    <button type=\"button\" className=\"btn btn-danger btn-sm\"\n                        onClick={() => handleRemoveItem()}>\n                        <span className=\"fas fa-trash-alt\"></span>\n                    </button>\n                    &nbsp;\n                    &nbsp;\n                </span>\n                }\n                <ProductLink id={item.productId} name={item.productName}/>\n            </td>\n            <td><FormattedNumber value={item.productPrice}/>€</td>\n            { edit &&\n            <td>\n                <form ref={node => form = node} \n                    className=\"form-inline needs-validation\" \n                    noValidate onSubmit={e => handleSubmit(e)}>\n                    <input type=\"number\" className=\"form-control mr-2\" style={{width: '50%'}}\n                        value={quantity}\n                        onChange={e => setQuantity(Number(e.target.value))}\n                        min=\"1\"/>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        <FormattedMessage id=\"project.global.buttons.save\"/>\n                    </button>\n                    <div className=\"invalid-feedback\">\n                        <FormattedMessage id='project.global.validator.incorrectQuantity'/>\n                    </div>\n                </form>\n            </td>\n            }\n            {!edit && <td>{item.quantity}</td>}\n        </tr>\n    );\n\n}\n\nShoppingItem.propTypes = {\n    shoppingItemListId: PropTypes.number.isRequired,\n    item: PropTypes.object.isRequired,\n    edit: PropTypes.bool,\n    onUpdateQuantity: PropTypes.func,\n    onRemoveItem: PropTypes.func,\n    onBackendErrors: PropTypes.func\n}\n\nexport default ShoppingItem;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedNumber} from 'react-intl';\n\nimport ShoppingItem from './ShoppingItem';\nimport {Errors} from '../../common';\n\nconst ShoppingItemList = ({list, edit, onUpdateQuantity, onRemoveItem}) => {\n\n    const [backendErrors, setBackendErrors] = useState(null);\n\n    if (list.items.length === 0) {\n        return (\n            <div className=\"alert alert-info\" role=\"alert\">\n                <FormattedMessage id='project.shopping.ShoppingCart.empty'/>\n            </div>\n        );\n    }\n\n    return (\n\n        <div>\n\n            <Errors errors={backendErrors}\n                onClose={() => setBackendErrors(null)}/>\n\n            <table className=\"table\">\n\n                <thead>\n                    <tr>\n                        <th scope=\"col\" style={{width: '60%'}}></th>\n                        <th scope=\"col\" style={{width: '20%'}}>\n                            <FormattedMessage id='project.global.fields.price'/>\n                        </th>\n                        <th scope=\"col\" style={{width: '20%'}}>\n                            <FormattedMessage id='project.global.fields.quantity'/>\n                        </th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {list.items.map(item => \n                        <ShoppingItem shoppingItemListId={list.id}\n                            key={item.productId} item={item}\n                            edit={edit} \n                            onUpdateQuantity={onUpdateQuantity}\n                            onRemoveItem={onRemoveItem}\n                            onBackendErrors={errors => setBackendErrors(errors)}/>\n                    )}\n                </tbody>\n\n            </table>\n\n            <p className=\"text-center font-weight-bold\">\n                <FormattedMessage id='project.global.fields.totalPrice'/> \n                : <FormattedNumber value={list.totalPrice}/>€\n            </p>\n\n        </div>\n\n    );\n\n}\n\nShoppingItemList.propTypes = {\n    list: PropTypes.object.isRequired,\n    edit: PropTypes.bool,\n    onUpdateQuantity: PropTypes.func,\n    onRemoveItem: PropTypes.func\n}\n\nexport default ShoppingItemList;","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport ShoppingItemList from './ShoppingItemList';\nimport * as selectors from '../selectors';\nimport * as actions from '../actions';\n\nconst ShoppingCart = () => {\n\n    const cart = useSelector(selectors.getShoppingCart);\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    return (\n\n        <div>\n            <ShoppingItemList list={cart} edit\n                onUpdateQuantity={(...args) => dispatch(actions.updateShoppingCartItemQuantity(...args))}\n                onRemoveItem={(...args) => dispatch(actions.removeShoppingCartItem(...args))}/>\n            {cart.items.length > 0 &&\n            <div className=\"text-center\">\n                <button type=\"button\" className=\"btn btn-primary\"\n                    onClick={() => history.push('/shopping/buy')}>\n                    <FormattedMessage id=\"project.global.buttons.buy\"/>\n                </button>\n            </div>\n            }\n        </div>\n\n    );\n\n}\nexport default ShoppingCart;","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport {Errors} from '../../common';\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\n\nconst BuyForm = () => {\n\n    const shoppingCart = useSelector(selectors.getShoppingCart);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [postalAddress, setPostalAddress] = useState('');\n    const [postalCode, setPostalCode] = useState('');\n    const [backendErrors, setBackendErrors] = useState(null);\n    let form;\n\n    const handleSubmit = event => {\n\n        event.preventDefault();\n\n        if (form.checkValidity()) {\n\n            dispatch(actions.buy(shoppingCart.id, \n                postalAddress.trim(), postalCode.trim(), \n                () => history.push('/shopping/purchase-completed'),\n                errors => setBackendErrors(errors)));\n\n        } else {\n            setBackendErrors(null);\n            form.classList.add('was-validated');\n        }\n\n    }\n\n    return (\n\n        <div>\n            <Errors errors={backendErrors}\n                onClose={() => setBackendErrors(null)}/>\n            <div className=\"card bg-light border-dark\">\n                <h5 className=\"card-header\">\n                    <FormattedMessage id=\"project.shopping.BuyForm.title\"/>\n                </h5>\n                <div className=\"card-body\">\n                    <form ref={node => form = node}\n                        className=\"needs-validation\" noValidate \n                        onSubmit={(e) => handleSubmit(e)}>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"postalAddress\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.postalAddress\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"postalAddress\" className=\"form-control\"\n                                    value={postalAddress}\n                                    onChange={e => setPostalAddress(e.target.value)}\n                                    autoFocus\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <label htmlFor=\"postalCode\" className=\"col-md-3 col-form-label\">\n                                <FormattedMessage id=\"project.global.fields.postalCode\"/>\n                            </label>\n                            <div className=\"col-md-4\">\n                                <input type=\"text\" id=\"postalCode\" className=\"form-control\"\n                                    value={postalCode}\n                                    onChange={e => setPostalCode(e.target.value)}\n                                    required/>\n                                <div className=\"invalid-feedback\">\n                                    <FormattedMessage id='project.global.validator.required'/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"form-group row\">\n                            <div className=\"offset-md-3 col-md-1\">\n                                <button type=\"submit\" className=\"btn btn-primary\">\n                                    <FormattedMessage id=\"project.global.buttons.buy\"/>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n\n    );\n\n}\n\nexport default BuyForm;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport ShoppingItemList from './ShoppingItemList';\nimport BuyForm from './BuyForm';\nimport * as selectors from '../selectors';\n\nconst Buy = () => {\n\n    const cart = useSelector(selectors.getShoppingCart);\n\n    if (cart.items.length === 0) {\n        return null;\n    }\n    \n   return (\n        <div>\n            <BuyForm/>\n            <ShoppingItemList list={cart}/>\n        </div>\n    );\n\n}\n\nexport default Buy;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst OrderLink = ({id}) => {\n\n    return (\n        <Link to={`/shopping/order-details/${id}`}>\n            {id}\n        </Link>\n    );\n\n}\n\nOrderLink.propTypes = {\n    id: PropTypes.number.isRequired\n};\n\nexport default OrderLink;","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as selectors from '../selectors';\nimport OrderLink from './OrderLink';\n\nconst PurchaseCompleted = () => {\n\n    const orderId = useSelector(selectors.getLastOrderId);\n\n    if (!orderId) {\n        return null;\n    }\n    \n    return (\n        <div className=\"alert alert-success\" role=\"alert\">\n            <FormattedMessage id=\"project.shopping.PurchaseCompleted.purchaseOrderGenerated\"/>:\n            &nbsp;\n            <OrderLink id={orderId}/>\n        </div>\n    );\n\n}\n\nexport default PurchaseCompleted;","import {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport * as actions from '../actions';\n\nconst FindOrders = () => {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    useEffect(() => {\n\n        dispatch(actions.findOrders({page: 0}));\n        history.push('/shopping/find-orders-result');\n\n    });\n\n    return null;\n\n}\n\nexport default FindOrders;\n","import React from 'react';\nimport {FormattedMessage, FormattedDate, FormattedTime} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport OrderLink from './OrderLink';\n\nconst Orders = ({orders}) => (\n\n    <table className=\"table table-striped table-hover\">\n\n        <thead>\n            <tr>\n                <th scope=\"col\">\n                    <FormattedMessage id='project.global.fields.purchaseOrder'/>\n                </th>\n                <th scope=\"col\">\n                    <FormattedMessage id='project.global.fields.date'/>\n                </th>\n            </tr>\n        </thead>\n\n        <tbody>\n            {orders.map(order => \n                <tr key={order.id}>\n                    <td><OrderLink id={order.id}/></td>\n                    <td>\n                        <FormattedDate value={new Date(order.date)}/> - <FormattedTime value={new Date(order.date)}/>\n                    </td>\n                </tr>\n            )}\n        </tbody>\n\n    </table>\n\n);\n\nOrders.propTypes = {\n    orders: PropTypes.array.isRequired\n};\n\nexport default Orders;\n\n","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\nimport {Pager} from '../../common';\nimport Orders from './Orders';\n\nconst FindOrdersResult = () => {\n\n    const orderSearch = useSelector(selectors.getOrderSearch);\n    const dispatch = useDispatch();\n\n    if (!orderSearch) {\n        return null;\n    }\n\n    if (orderSearch.result.items.length === 0) {\n        return (\n            <div className=\"alert alert-info\" role=\"alert\">\n                <FormattedMessage id='project.shopping.FindOrdersResult.noOrders'/>\n            </div>\n        );\n    }\n\n    return (\n\n        <div>\n            <Orders orders={orderSearch.result.items}/>\n            <Pager \n                back={{\n                    enabled: orderSearch.criteria.page >= 1,\n                    onClick: () => dispatch(actions.previousFindOrdersResultPage(orderSearch.criteria))}}\n                next={{\n                    enabled: orderSearch.result.existMoreItems,\n                    onClick: () => dispatch(actions.nextFindOrdersResultPage(orderSearch.criteria))}}/>\n        </div>\n\n    );\n\n}\n\nexport default FindOrdersResult;","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage, FormattedDate, FormattedTime} from 'react-intl';\nimport {useParams} from 'react-router-dom';\n\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\nimport ShoppingItemList from './ShoppingItemList';\nimport {BackLink} from '../../common';\n\nconst OrderDetails = () => {\n\n    const {id} = useParams();\n    const order = useSelector(selectors.getOrder);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n\n        if (!Number.isNaN(id)) {   \n            dispatch(actions.findOrder(id));\n        }\n\n        return () => dispatch(actions.clearOrder());\n\n    }, [id, dispatch]);\n\n    if (!order) {\n        return null;\n    }\n\n    return (\n\n        <div>\n\n            <BackLink/>\n\n            <div className=\"card text-center\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">\n                        <FormattedMessage id='project.global.fields.purchaseOrder'/> {order.id} \n                    </h5>\n                    <h6 className=\"card-subtitle text-muted\">\n                        <FormattedDate value={new Date(order.date)}/> - <FormattedTime value={new Date(order.date)}/>\n                    </h6>\n                    <p className=\"card-text\">\n                        {order.postalAddress} - {order.postalCode} \n                    </p>\n                </div>\n            </div>\n\n            <ShoppingItemList list={order}/>\n\n        </div>\n\n    );\n\n}\n\nexport default OrderDetails;","import * as actions from './actions';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nexport {default as AddToShoppingCart} from './components/AddToShoppingCart';\nexport {default as ShoppingCartIcon} from './components/ShoppingCartIcon';\nexport {default as ShoppingCart} from './components/ShoppingCart';\nexport {default as Buy} from './components/Buy';\nexport {default as PurchaseCompleted} from './components/PurchaseCompleted';\nexport {default as FindOrders} from './components/FindOrders';\nexport {default as FindOrdersResult} from './components/FindOrdersResult';\nexport {default as OrderDetails} from './components/OrderDetails';\n\nexport default {actions, reducer, selectors};","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {FormattedMessage, FormattedNumber} from 'react-intl';\nimport {useParams} from 'react-router-dom';\n\nimport users from '../../users';\nimport * as selectors from '../selectors';\nimport * as actions from '../actions';\nimport {AddToShoppingCart} from '../../shopping';\nimport {BackLink} from '../../common';\n\nconst ProductDetails = () => {\n\n    const loggedIn = useSelector(users.selectors.isLoggedIn);\n    const product = useSelector(selectors.getProduct);\n    const categories = useSelector(selectors.getCategories);\n    const dispatch = useDispatch();\n    const {id} = useParams();\n\n    useEffect(() => {\n\n        const productId = Number(id);\n\n        if (!Number.isNaN(productId)) {\n            dispatch(actions.findProductById(productId));\n        }\n\n        return () => dispatch(actions.clearProduct());\n\n    }, [id, dispatch]);\n\n    if (!product) {\n        return null;\n    }\n        \n    return (\n\n        <div>\n\n            <BackLink/>\n            \n            <div className=\"card text-center\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{product.name}</h5>\n                    <h6 className=\"card-subtitle text-muted\">\n                        <FormattedMessage id='project.global.fields.department'/>:&nbsp;\n                            {selectors.getCategoryName(categories, product.categoryId)}\n                    </h6>\n                    <p className=\"card-text\">{product.description}</p>\n                    <p className=\"card-text font-weight-bold\">\n                        <FormattedMessage id='project.global.fields.price'/>\n                        : <FormattedNumber value={product.price}/>€\n                    </p>\n                </div>\n            </div>\n\n            {loggedIn && \n                <div>\n                    <br/>\n                    <AddToShoppingCart productId={product.id}/>\n                </div>\n            }\n\n        </div>\n\n    );\n\n}\n\nexport default ProductDetails;\n","import * as actions from './actions';\nimport * as actionTypes from './actionTypes';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nexport {default as FindProducts} from './components/FindProducts';\nexport {default as FindProductsResult} from './components/FindProductsResult';\nexport {default as ProductDetails} from './components/ProductDetails';\n\nexport default {actions, actionTypes, reducer, selectors};\n\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {FindProducts} from '../../catalog';\nimport {ShoppingCartIcon} from '../../shopping';\nimport users from '../../users';\n\nconst Header = () => {\n\n    const userName = useSelector(users.selectors.getUserName);\n    \n    return (\n\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light border\">\n            <Link className=\"navbar-brand\" to=\"/\">PA Shop</Link>\n            <button className=\"navbar-toggler\" type=\"button\" \n                data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" \n                aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" \n                aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\n                <ul className=\"navbar-nav mr-auto\">\n                    <li>\n                        <FindProducts/>\n                    </li>\n                </ul>\n\n                \n                {userName ? \n\n                <ul className=\"navbar-nav\">\n\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/shopping/shopping-cart\">\n                            <ShoppingCartIcon/>\n                        </Link>\n                    </li>\n\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/shopping/find-orders\">\n                            <FormattedMessage id=\"project.shopping.header.orders\"/>\n                        </Link>\n                    </li>\n                    \n                    <li className=\"nav-item dropdown\">\n\n                        <a className=\"dropdown-toggle nav-link\" href=\"/\"\n                            data-toggle=\"dropdown\">\n                            <span className=\"fas fa-user\"></span>&nbsp;\n                            {userName}\n                        </a>\n                        <div className=\"dropdown-menu dropdown-menu-right\">\n                            <Link className=\"dropdown-item\" to=\"/users/update-profile\">\n                                <FormattedMessage id=\"project.users.UpdateProfile.title\"/>\n                            </Link>\n                            <Link className=\"dropdown-item\" to=\"/users/change-password\">\n                                <FormattedMessage id=\"project.users.ChangePassword.title\"/>\n                            </Link>\n                            <div className=\"dropdown-divider\"></div>\n                            <Link className=\"dropdown-item\" to=\"/users/logout\">\n                                <FormattedMessage id=\"project.app.Header.logout\"/>\n                            </Link>\n                        </div>\n\n                    </li>\n\n                </ul>\n                \n                :\n\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/users/login\">\n                            <FormattedMessage id=\"project.users.Login.title\"/>\n                        </Link>\n                    </li>\n                </ul>\n                \n                }\n\n            </div>\n        </nav>\n\n    );\n\n};\n\nexport default Header;\n","import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {ErrorDialog, Loader} from '../../common';\nimport * as actions from '../actions';\nimport * as selectors from '../selectors';\n\nconst ConnectedErrorDialog = () => {\n\n    const error = useSelector(selectors.getError);\n    const dispatch = useDispatch();\n\n    return <ErrorDialog error={error} \n                onClose={() => dispatch(actions.error(null))}/>\n\n};\n\nconst ConnectedLoader = () => {\n\n    const loading = useSelector(selectors.isLoading);\n\n    return <Loader loading={loading}/>\n\n};\n\nconst AppGlobalComponents = () => (\n\n    <div>\n        <ConnectedErrorDialog/>\n        <ConnectedLoader/>\n    </div>\n\n);\n\nexport default AppGlobalComponents;","import React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst Home = () => (\n    <div className=\"text-center\">\n        <FormattedMessage id=\"project.app.Home.welcome\"/>\n    </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Route, Switch} from 'react-router-dom';\n\nimport AppGlobalComponents from './AppGlobalComponents';\nimport Home from './Home';\nimport {Login, SignUp, UpdateProfile, ChangePassword, Logout} from '../../users';\nimport users from '../../users';\nimport {FindProductsResult, ProductDetails} from '../../catalog';\nimport {ShoppingCart, Buy, PurchaseCompleted, FindOrders, FindOrdersResult, OrderDetails} from '../../shopping';\n\nconst Body = () => {\n\n    const loggedIn = useSelector(users.selectors.isLoggedIn);\n    \n   return (\n\n        <div className=\"container\">\n            <br/>\n            <AppGlobalComponents/>\n            <Switch>\n                <Route exact path=\"/\"><Home/></Route>\n                <Route exact path=\"/catalog/find-products-result\"><FindProductsResult/></Route>\n                <Route exact path=\"/catalog/product-details/:id\"><ProductDetails/></Route>\n                {loggedIn && <Route exact path=\"/shopping/shopping-cart\"><ShoppingCart/></Route>}\n                {loggedIn && <Route exact path=\"/shopping/buy\"><Buy/></Route>}\n                {loggedIn && <Route exact path=\"/shopping/purchase-completed\"><PurchaseCompleted/></Route>}\n                {loggedIn && <Route exact path=\"/shopping/find-orders\"><FindOrders/></Route>}\n                {loggedIn && <Route exact path=\"/shopping/find-orders-result\"><FindOrdersResult/></Route>}\n                {loggedIn && <Route exact path=\"/shopping/order-details/:id\"><OrderDetails/></Route>}\n                {loggedIn && <Route exact path=\"/users/update-profile\"><UpdateProfile/></Route>}\n                {loggedIn && <Route exact path=\"/users/change-password\"><ChangePassword/></Route>}\n                {loggedIn && <Route exact path=\"/users/logout\"><Logout/></Route>}\n                {!loggedIn && <Route exact path=\"/users/login\"><Login/></Route>}\n                {!loggedIn && <Route exact path=\"/users/signup\"><SignUp/></Route>}\n                <Route><Home/></Route>\n            </Switch>\n        </div>\n\n    );\n\n};\n\nexport default Body;\n","import React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst Footer = () => (\n\n    <div>\n        <br/>\n        <hr/>\n        <footer>\n            <p className=\"text-center\">\n                <FormattedMessage id=\"project.app.Footer.text\"/>\n            </p>\n        </footer>\n    </div>\n\n);\n\nexport default Footer;\n","import React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\nimport users from '../../users';\nimport catalog from '../../catalog';\n\nconst App = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n  \n        dispatch(users.actions.tryLoginFromServiceToken(\n            () => dispatch(users.actions.logout())));\n\n        dispatch(catalog.actions.findAllCategories());\n\n    });\n\n    return (\n        <div>\n            <Router>\n                <div>\n                    <Header/>\n                    <Body/>\n                </div>\n            </Router>\n            <Footer/>\n        </div>\n    );\n\n}\n\nexport default App;","import * as actions from './actions';\nimport reducer from './reducer'\nimport * as selectors from './selectors';\n\nexport {default as App} from \"./components/App\";\n\nexport default {actions, reducer, selectors};","import {combineReducers} from 'redux';\n\nimport app from '../modules/app';\nimport users from '../modules/users';\nimport catalog from '../modules/catalog';\nimport shopping from '../modules/shopping';\n\nconst rootReducer = combineReducers({\n    app: app.reducer,\n    users: users.reducer,\n    catalog: catalog.reducer,\n    shopping: shopping.reducer\n});\n\nexport default rootReducer;\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = () => {\n\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || \n        compose;\n\n    const middlewares = [thunk];\n\n    return createStore(rootReducer, composeEnhancers(\n       applyMiddleware(...middlewares)));\n\n}\n\nexport default configureStore;","import en from './messages_en';\nimport es from './messages_es';\nimport gl from './messages_gl';\n\nexport default {\n    'en': en,\n    'es': es,\n    'gl': gl\n};","export default {\n\n    'project.app.Footer.text': 'PA Shop - Area of Telematics Engineering - University of A Coruña',\n    'project.app.Header.home': 'Home',\n    'project.app.Header.logout': 'Logout',\n    'project.shopping.header.orders': 'Orders',\n    'project.app.Home.welcome': 'Browse our catalog of products.',\n\n    'project.catalog.CategorySelector.allDepartments': 'All departments',\n    'project.catalog.FindProductsResult.noProductsFound': 'No products found',\n\n    'project.common.ErrorDialog.title': 'Error',\n\n    'project.global.buttons.buy': 'Buy',\n    'project.global.buttons.cancel': 'Cancel',\n    'project.global.buttons.close': 'Close',\n    'project.global.buttons.next': 'Next',\n    'project.global.buttons.ok': 'OK',\n    'project.global.buttons.back': 'Back',\n    'project.global.buttons.save': 'Save',\n    'project.global.buttons.search': 'Search',\n    'project.global.exceptions.NetworkError': 'Network error',\n    'project.global.fields.date': 'Date',\n    'project.global.fields.department': 'Department',\n    'project.global.fields.email': 'Email address',\n    'project.global.fields.firstName': 'First name',\n    'project.global.fields.purchaseOrder': 'Purchase order',\n    'project.global.fields.lastName': 'Last name',\n    'project.global.fields.name': 'Name',\n    'project.global.fields.password': 'Password',\n    'project.global.fields.postalAddress': 'Postal address',\n    'project.global.fields.postalCode': 'Postal code',\n    'project.global.fields.price': 'Price',\n    'project.global.fields.quantity': 'Quantity',\n    'project.global.fields.totalPrice': 'Total price',\n    'project.global.fields.userName': 'Username',\n    'project.global.validator.email': 'Provide a correct e-mail address',\n    'project.global.validator.incorrectQuantity': 'Incorrect quantity',\n    'project.global.validator.passwordsDoNotMatch': 'Passwords do not match',\n    'project.global.validator.required': 'Required field',\n\n    'project.shopping.AddToCart.add': 'Add to cart',\n    'project.shopping.BuyForm.title': 'Buy',\n    'project.shopping.FindOrdersResult.noOrders': 'No orders found',\n    'project.shopping.PurchaseCompleted.purchaseOrderGenerated': 'Purchase order generated',\n    'project.shopping.ShoppingCart.empty': 'Cart is empty',\n\n    'project.users.ChangePassword.fields.confirmNewPassword': 'Confirm new password',\n    'project.users.ChangePassword.fields.newPassword': 'New password',\n    'project.users.ChangePassword.fields.oldPassword': 'Old password',\n    'project.users.ChangePassword.title': 'Change password',\n    'project.users.Login.title': 'Login',\n    'project.users.SignUp.fields.confirmPassword': 'Confirm password',\n    'project.users.SignUp.title': 'Sign up',\n    'project.users.UpdateProfile.title': 'Update profile'\n\n}\n","export default {\n\n    'project.app.Footer.text': 'PA Shop - Area de Ingeniería Telemática - Universidad de A Coruña',\n    'project.app.Header.home': 'Inicio',\n    'project.app.Header.logout': 'Salir',\n    'project.shopping.header.orders': 'Pedidos',\n    'project.app.Home.welcome': 'Busque en nuestro catálogo de productos.',\n\n    'project.catalog.CategorySelector.allDepartments': 'Todos los departamentos',\n    'project.catalog.FindProductsResult.noProductsFound': 'No se encontraron productos',\n\n    'project.common.ErrorDialog.title': 'Error',\n\n    'project.global.buttons.buy': 'Comprar',\n    'project.global.buttons.cancel': 'Cancelar',\n    'project.global.buttons.close': 'Cerrar',\n    'project.global.buttons.next': 'Siguiente',\n    'project.global.buttons.ok': 'OK',\n    'project.global.buttons.back': 'Anterior',\n    'project.global.buttons.save': 'Guardar',\n    'project.global.buttons.search': 'Buscar',\n    'project.global.exceptions.NetworkError': 'Fallo de comunicación',\n    'project.global.fields.date': 'Fecha',\n    'project.global.fields.department': 'Departamento',\n    'project.global.fields.email': 'Correo electrónico',\n    'project.global.fields.firstName': 'Nombre',\n    'project.global.fields.purchaseOrder': 'Orden de compra',\n    'project.global.fields.lastName': 'Apellidos',\n    'project.global.fields.name': 'Nombre',\n    'project.global.fields.password': 'Contraseña',\n    'project.global.fields.postalAddress': 'Dirección postal',\n    'project.global.fields.postalCode': 'Código postal',\n    'project.global.fields.price': 'Precio',\n    'project.global.fields.quantity': 'Cantidad',\n    'project.global.fields.totalPrice': 'Precio total',\n    'project.global.fields.userName': 'Usuario',\n    'project.global.validator.email': 'Introduzca una dirección de correo electrónico correcta',\n    'project.global.validator.incorrectQuantity': 'Cantidad incorrecta',\n    'project.global.validator.passwordsDoNotMatch': 'Las contraseñas no coinciden',\n    'project.global.validator.required': 'Campo obligatorio',\n\n    'project.shopping.AddToCart.add': 'Añadir al carrito',\n    'project.shopping.BuyForm.title': 'Comprar',\n    'project.shopping.FindOrdersResult.noOrders': 'No se encontraron pedidos',\n    'project.shopping.PurchaseCompleted.purchaseOrderGenerated': 'Orden de compra generada',\n    'project.shopping.ShoppingCart.empty': 'El carrito está vacío',\n\n    'project.users.ChangePassword.fields.confirmNewPassword': 'Confirmar contraseña nueva',\n    'project.users.ChangePassword.fields.newPassword': 'Contraseña nueva',\n    'project.users.ChangePassword.fields.oldPassword': 'Contraseña antigua',\n    'project.users.ChangePassword.title': 'Cambiar contraseña',\n    'project.users.Login.title': 'Autenticarse',\n    'project.users.SignUp.fields.confirmPassword': 'Confirmar contraseña',\n    'project.users.SignUp.title': 'Registrarse',\n    'project.users.UpdateProfile.title': 'Actualizar perfil'\n\n}\n","export default {\n\n    'project.app.Footer.text': 'PA Shop - Area de Enxeñaría Telemática - Universidade da Coruña',\n    'project.app.Header.home': 'Inicio',\n    'project.app.Header.logout': 'Saír',\n    'project.shopping.header.orders': 'Pedidos',\n    'project.app.Home.welcome': 'Busque no noso catálogo de productos.',\n\n    'project.catalog.CategorySelector.allDepartments': 'Tódolos departamentos',\n    'project.catalog.FindProductsResult.noProductsFound': 'No se atoparon productos',\n\n    'project.common.ErrorDialog.title': 'Erro',\n\n    'project.global.buttons.buy': 'Mercar',\n    'project.global.buttons.cancel': 'Cancelar',\n    'project.global.buttons.close': 'Cerrar',\n    'project.global.buttons.next': 'Seguinte',\n    'project.global.buttons.ok': 'OK',\n    'project.global.buttons.back': 'Anterior',\n    'project.global.buttons.save': 'Gardar',\n    'project.global.buttons.search': 'Buscar',\n    'project.global.exceptions.NetworkError': 'Erro de comunicación',\n    'project.global.fields.date': 'Data',\n    'project.global.fields.department': 'Departamento',\n    'project.global.fields.email': 'Correo electrónico',\n    'project.global.fields.firstName': 'Nome',\n    'project.global.fields.purchaseOrder': 'Orden de compra',\n    'project.global.fields.lastName': 'Apelidos',\n    'project.global.fields.name': 'Nome',\n    'project.global.fields.password': 'Contrasinal',\n    'project.global.fields.postalAddress': 'Dirección postal',\n    'project.global.fields.postalCode': 'Código postal',\n    'project.global.fields.price': 'Prezo',\n    'project.global.fields.quantity': 'Cantidade',\n    'project.global.fields.totalPrice': 'Prezo total',\n    'project.global.fields.userName': 'Usuario',\n    'project.global.validator.email': 'Introduzca unha dirección de correo electrónico correcta',\n    'project.global.validator.incorrectQuantity': 'Cantidade incorrecta',\n    'project.global.validator.passwordsDoNotMatch': 'As contrasinais non coinciden',\n    'project.global.validator.required': 'Campo obrigatorio',\n\n    'project.shopping.AddToCart.add': 'Engadir ao carrito',\n    'project.shopping.BuyForm.title': 'Mercar',\n    'project.shopping.FindOrdersResult.noOrders': 'Non se atoparon pedidos',\n    'project.shopping.PurchaseCompleted.purchaseOrderGenerated': 'Orden de compra xerada',\n    'project.shopping.ShoppingCart.empty': 'O carro está baleiro',\n\n    'project.users.ChangePassword.fields.confirmNewPassword': 'Confirmar contrasinal nova',\n    'project.users.ChangePassword.fields.newPassword': 'Contrasinal nova',\n    'project.users.ChangePassword.fields.oldPassword': 'Contrasinal antiga',\n    'project.users.ChangePassword.title': 'Cambiar contrasinal',\n    'project.users.Login.title': 'Autenticarse',\n    'project.users.SignUp.fields.confirmPassword': 'Confirmar contrasinal',\n    'project.users.SignUp.title': 'Rexistrarse',\n    'project.users.UpdateProfile.title': 'Actualizar perfil'\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport {Provider} from 'react-redux';\nimport {IntlProvider} from 'react-intl';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap';\nimport '@fortawesome/fontawesome-free/css/fontawesome.css';\nimport '@fortawesome/fontawesome-free/css/solid.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport {App} from './modules/app';\nimport backend from './backend';\nimport {NetworkError} from './backend';\nimport app from './modules/app';\nimport {initReactIntl} from './i18n';\nimport './styles.css';\n\n/* Configure store. */\nconst store = configureStore();\n\n/* Configure backend proxy. */\nbackend.init(error => store.dispatch(app.actions.error(new NetworkError())));\n\n/* Configure i18n. */\nconst {locale, messages} = initReactIntl();\n\n/* Render application. */\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <IntlProvider locale={locale} messages={messages}>\n                <App/>\n            </IntlProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import messages from './messages';\n\nexport const initReactIntl = () => {\n\n    let locale = (navigator.languages && navigator.languages[0]) ||\n        navigator.language || navigator.userLanguage || 'en';\n    const localeWithoutRegionCode = locale.toLowerCase().split(/[_-]+/)[0];\n    const localeMessages = messages[locale] || \n        messages[localeWithoutRegionCode] || messages['en'];\n\n    locale = localeMessages === messages['en'] ? 'en' : locale;\n\n    return {locale, messages: localeMessages};\n\n}\n\n"],"sourceRoot":""}